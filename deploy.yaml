---
# Source: HummerRisk/templates/mysql/secret-mysql.yaml
# Source: mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hummerrisk-mysql-password
  namespace: "dev"
  labels:
    app.kubernetes.io/name: mysql
type: Opaque
data:
  mysql-root-password: Ikh1bW1lckBwYXNzd29yZDEyMyI=
---
# Source: HummerRisk/templates/configmap-hummerrisk.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hummerrisk-config
  namespace: "dev"
data:
  hummerrisk.properties: |
    spring.datasource.url=jdbc:mysql://hummerrisk-mysql:3306/hummerrisk?autoReconnect=false&useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false
    spring.datasource.username=root
    spring.datasource.password="Hummer@password123"
---
# Source: HummerRisk/templates/mysql/configmap-mysql.yaml
# Source: mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hummerrisk-mysql-config
  namespace: "dev"
  labels:
    app.kubernetes.io/name: mysql
data:
  my.cnf: |-
    [mysqld]
    datadir=/var/lib/mysql
    default-storage-engine=INNODB
    character_set_server=utf8
    lower_case_table_names=1
    table_open_cache=128
    max_connections=2000
    max_connect_errors=6000
    innodb_file_per_table=1
    innodb_buffer_pool_size=1G
    max_allowed_packet=1G
    slave_max_allowed_packet=1G
    transaction_isolation=READ-COMMITTED
    innodb_flush_method=O_DIRECT
    innodb_lock_wait_timeout=1800
    innodb_flush_log_at_trx_commit=0
    sync_binlog=0
    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
    skip-name-resolve

    [mysql]
    default-character-set=utf8

    [client]
    port=3306
    socket=/var/run/mysqld/mysqld.sock
    default-character-set=UTF8

    [mysql.server]
    default-character-set=utf8
---
# Source: HummerRisk/templates/mysql/pvc-mysql.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hummerrisk-data-mysql
  namespace: "dev"
  annotations:
    volume.beta.kubernetes.io/storage-class: "nfs"
spec:
  storageClassName: "nfs"
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "50Gi"
---
# Source: HummerRisk/templates/pvc-hummerrisk.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hummerrisk-data-logs
  namespace: "dev"
  annotations:
    volume.beta.kubernetes.io/storage-class: nfs
spec:
  storageClassName: "nfs"
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "20Gi"
---
# Source: HummerRisk/templates/pvc-hummerrisk.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hummerrisk-data-image
  annotations:
    volume.beta.kubernetes.io/storage-class: nfs
spec:
  storageClassName: "nfs"
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "30Gi"
---
# Source: HummerRisk/templates/pvc-hummerrisk.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hummerrisk-data-file
  annotations:
    volume.beta.kubernetes.io/storage-class: nfs
spec:
  storageClassName: "nfs"
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "10Gi"
---
# Source: HummerRisk/templates/mysql/mysql-deploy.yaml
apiVersion: v1
kind: Service
metadata:
  name: hummerrisk-mysql
  namespace: "dev"
  labels:
    app.kubernetes.io/name: mysql
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/name: mysql
---
# Source: HummerRisk/templates/service-hummerrisk.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hummerrisk
  name: hummerrisk-web
  namespace: "dev"
spec:
  ports:
    - name: "web-hummerrisk"
      port:  80
      targetPort: 8088
  selector:
    app: hummerrisk
  type: ClusterIP
  sessionAffinity: ClientIP
---
# Source: HummerRisk/templates/deployment-hummerrisk.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    owner: hummercloud-dev
  labels:
    app: hummerrisk
  name: hummerrisk
  namespace: "dev"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hummerrisk
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: hummerrisk
    spec:
      #tolerations:
        #- effect: NoSchedule
        #  key: node-role.kubernetes.io/master
      containers:
      - name: hummerrisk
        image: "registry.cn-beijing.aliyuncs.com/hummerrisk/hummerrisk:v0.3.2"
        #imagePullPolicy: IfNotPresent
        imagePullPolicy: Always
        resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -ec
              - curl -fsL http://localhost:8088 > /dev/null
          failureThreshold: 10
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -ec
              - curl -fsL http://localhost:8088 > /dev/null
        volumeMounts:
          - name: config-volume
            mountPath: /opt/hummerrisk/conf
          - name: log-volume
            mountPath: /opt/hummerrisk/log
          - name: file-volume
            mountPath: /opt/hummerrisk/file
          - name: image-volume
            mountPath: /opt/hummerrisk/image
          - name: docker-sock
            mountPath: /var/run/docker.sock
        ports:
          - containerPort: 8088
      volumes:
        - name: config-volume
          configMap:
            name: hummerrisk-config
            optional: true
        - name: log-volume
          persistentVolumeClaim:
            claimName: hummerrisk-data-logs
        - name: file-volume
          persistentVolumeClaim:
            claimName: hummerrisk-data-file
        - name: image-volume
          persistentVolumeClaim:
            claimName: hummerrisk-data-image
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
---
# Source: HummerRisk/templates/mysql/mysql-deploy.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hummerrisk-mysql
  namespace: "dev"
  labels:
    app.kubernetes.io/name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  serviceName: hummerrisk-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: hummerrisk-mysql
    spec:
      securityContext:
        fsGroup: 1001
      containers:
        - name: mysql
          image: "registry.cn-beijing.aliyuncs.com/hummerrisk/mysql:5.7.38"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hummerrisk-mysql-password
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "hummerrisk"
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: config
              mountPath: /etc/mysql/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            defaultMode: 420
            name: hummerrisk-mysql-config
        - name: mysql-data
          
          persistentVolumeClaim:
            claimName: hummerrisk-data-mysql
---
# Source: HummerRisk/templates/ingress-hummerrisk.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hummerrisk
  namespace: "dev"
  labels:
    helm.sh/chart: HummerRisk-0.1.0
    app.kubernetes.io/name: hummerrisk
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "v0.3.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/session-cookie-name: route
spec:
  ingressClassName: nginx
  rules:
    - host: "hummerrisk.example.local"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: hummerrisk-web
                port:
                  number: 80